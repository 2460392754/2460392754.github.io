<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面试官:如何自己手写一个mini的vuex3?</title>
    <link href="/2022/05/07/mini-project/mini-vuex3/"/>
    <url>/2022/05/07/mini-project/mini-vuex3/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/posts/mini-project/mini-vuex3.png" alt="实现功能"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://github.com/vuejs/vuex/tree/v3.6.2">源码地址:vuejs&#x2F;vuex@3.6.2</a></p><p><a href="https://github.com/2460392754/mini-project/tree/master/mini-vuex3">myGithub:2460392754&#x2F;mini-vuex3</a></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight vim"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs vim">src<br>├── core<br>│   ├── helpers.<span class="hljs-keyword">ts</span><br>│   ├── <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>│   └── store.<span class="hljs-keyword">ts</span><br>├── types<br>│   └── <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>├── utils<br>│   ├── <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>│   ├── isModuleType.<span class="hljs-keyword">ts</span><br>│   ├── reactive.<span class="hljs-keyword">ts</span><br>│   └── register.<span class="hljs-keyword">ts</span><br>└── <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br></code></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1-基本"><a href="#1-基本" class="headerlink" title="1 基本"></a>1 基本</h3><h4 id="1-1-注册"><a href="#1-1-注册" class="headerlink" title="1.1 注册"></a>1.1 注册</h4><p>使用<code>class</code>的<code>static</code>属性进行创建一个名为<code>install</code>的静态方法, 用于<code>Vue.use</code>注册插件。</p><p>插件注册时把当前环境的<code>vue</code>对象引用保存下来，确保项目和插件使用的是同一个引用对象。因为需要利用项目中的<code>data</code>功能来辅助<code>state</code>和<code>getters</code>值更新后触发视图更新。</p><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/core/store.ts#L6-L23">github: mini-vuex3&#x2F;src&#x2F;core&#x2F;store.ts#L6-L23</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">VueConstructor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-comment">// 保存当前vue引用, 确保和项目使用相同的引用</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">_vue</span>: <span class="hljs-title class_">VueConstructor</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">store</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插件注册</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">vue</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">install</span>(<span class="hljs-params">vue: VueConstructor</span>) &#123;<br>        _vue = vue;<br>    &#125;<br><br>    <span class="hljs-comment">// do something...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-实例化"><a href="#1-2-实例化" class="headerlink" title="1.2 实例化"></a>1.2 实例化</h4><p>通过<code>class</code>的构造函数进行初始化。</p><p>(Tips: <code>registerState</code>和<code>registerGetters</code>会在后面的<a href="#2-%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">实例属性</a>里讲到)</p><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/core/store.ts#L40-L59">github: mini-vuex3&#x2F;src&#x2F;core&#x2F;store.ts#L40-L59</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">StoreOpts</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../types&#x27;</span>;<br><br><span class="hljs-comment">// 保存当前vue引用, 确保和项目使用相同的引用</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">_vue</span>: <span class="hljs-title class_">VueConstructor</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">store</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">_vm</span>: <span class="hljs-title class_">Vue</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> _mutations = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> _actions = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> _modules = <span class="hljs-literal">null</span>;<br><br>    getters = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">opts: StoreOpts</span>) &#123;<br>        <span class="hljs-comment">// 添加 原型属性，指向当前store实例化后的对象</span><br>        _vue.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$store</span> = <span class="hljs-variable language_">this</span>;<br><br>        <span class="hljs-comment">// _state对象 响应式处理, 需要通知项目视图更新</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_vm</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">_vue</span>(&#123;<br>            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-attr">_state</span>: <span class="hljs-title function_">registerState</span>(opts),<br>                &#125;;<br>            &#125;,<br>        &#125;);<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">getters</span> = <span class="hljs-title function_">registerGetters</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>, opts || &#123;&#125;);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_mutations</span> = opts.<span class="hljs-property">mutations</span> || &#123;&#125;;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_actions</span> = opts.<span class="hljs-property">actions</span> || &#123;&#125;;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_modules</span> = opts.<span class="hljs-property">modules</span> || &#123;&#125;;<br><br>        <span class="hljs-title function_">registerModules</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_mutations</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_actions</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_modules</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>registerModules</strong></p><p>使用 es6 中<code>Reflect</code>特性进行修改对象的键名模拟私有对象, 例如: <code>&#123; A: &#39;a&#39; &#125;</code> &#x3D;&gt; <code>&#123; _A: &#39;a&#39; &#125;</code>。</p><p>把规范化后<code>moduels.[NAME].mutations</code>和<code>moduels.[NAME].actions</code>对象进行合并。</p><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/utils/register.ts#L57-L84">github: mini-vuex3&#x2F;src&#x2F;utils&#x2F;register.ts#L57-L84</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注册 modules</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">registerModules</span>(<span class="hljs-params">mutations: Mutations, actions: Actions, modules: Modules</span>) &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(modules).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = modules[key] <span class="hljs-keyword">as</span> <span class="hljs-title class_">Module</span> &amp; &#123;<br>            <span class="hljs-attr">_actions</span>: <span class="hljs-title class_">Actions</span>;<br>            <span class="hljs-attr">_mutations</span>: <span class="hljs-title class_">Mutations</span>;<br>        &#125;;<br><br>        <span class="hljs-comment">// 修改键名</span><br>        <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">module</span>, <span class="hljs-string">&#x27;_actions&#x27;</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">actions</span>);<br>        <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">module</span>, <span class="hljs-string">&#x27;_mutations&#x27;</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">mutations</span>);<br>        <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(<span class="hljs-variable language_">module</span>, <span class="hljs-string">&#x27;actions&#x27;</span>);<br>        <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(<span class="hljs-variable language_">module</span>, <span class="hljs-string">&#x27;mutations&#x27;</span>);<br><br>        <span class="hljs-keyword">let</span> moduleActions = <span class="hljs-variable language_">module</span>.<span class="hljs-property">_actions</span>;<br>        <span class="hljs-keyword">let</span> moduleMutations = <span class="hljs-variable language_">module</span>.<span class="hljs-property">_mutations</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>.<span class="hljs-property">namespaced</span> === <span class="hljs-literal">true</span>) &#123;<br>            moduleMutations = <span class="hljs-title function_">setModuleNameDataKey</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span>, moduleMutations);<br>            moduleActions = <span class="hljs-title function_">setModuleNameDataKey</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span>, moduleActions);<br>        &#125;<br><br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(mutations, moduleMutations);<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(actions, moduleActions);<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改 modules 中对象的键名, 使用 module.name 追加拼接</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">moduleName</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">data</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setModuleNameDataKey</span>(<span class="hljs-params">moduleName: <span class="hljs-built_in">string</span>, data: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">Function</span> &#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> res = &#123;&#125;;<br><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(data).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> newKey = moduleName + <span class="hljs-string">&#x27;/&#x27;</span> + key;<br><br>        res[newKey] = data[key];<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-实例属性"><a href="#2-实例属性" class="headerlink" title="2 实例属性"></a>2 实例属性</h3><h4 id="2-1-state-属性"><a href="#2-1-state-属性" class="headerlink" title="2.1 state 属性"></a>2.1 state 属性</h4><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/core/store.ts#L28-L51">github: mini-vuex3&#x2F;src&#x2F;core&#x2F;store.ts#L28-L51</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">store</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置 state的get访问器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">state</span>(): <span class="hljs-title class_">State</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_vm</span>.<span class="hljs-property">$data</span>.<span class="hljs-property">_state</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置 state的set访问器</span><br><span class="hljs-comment">     * 禁止直接写入数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">state</span>(<span class="hljs-params">v: <span class="hljs-built_in">any</span></span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;can&#x27;t set state: &quot;</span> + v);<br>    &#125;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">opts: StoreOpts</span>) &#123;<br>        <span class="hljs-comment">// _state对象 响应式处理, 需要通知项目视图更新</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_vm</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">_vue</span>(&#123;<br>            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-attr">_state</span>: <span class="hljs-title function_">registerState</span>(opts),<br>                &#125;;<br>            &#125;,<br>        &#125;);<br><br>        <span class="hljs-comment">// do something...</span><br>    &#125;<br><br>    <span class="hljs-comment">// do something...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>registerState</strong></p><p>把<code>module.[NAME].state</code>合并到<code>state</code>中</p><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/utils/register.ts#L22-L35">github: mini-vuex3&#x2F;src&#x2F;utils&#x2F;register.ts#L22-L35</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注册 state</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">opts</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">registerState</span>(<span class="hljs-params">opts: StoreOpts</span>) &#123;<br>    <span class="hljs-keyword">const</span> moduleStates = &#123;&#125;;<br><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(opts.<span class="hljs-property">modules</span> || &#123;&#125;).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) =&gt;</span> &#123;<br>        moduleStates[<span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span>] = <span class="hljs-variable language_">module</span>.<span class="hljs-property">state</span> || &#123;&#125;;<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(moduleStates, opts.<span class="hljs-property">state</span> || &#123;&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-getters-属性"><a href="#2-2-getters-属性" class="headerlink" title="2.2 getters 属性"></a>2.2 getters 属性</h4><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/core/store.ts#L53">github: mini-vuex3&#x2F;src&#x2F;core&#x2F;store.ts#L53</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">store</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">opts: StoreOpts</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">getters</span> = <span class="hljs-title function_">registerGetters</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>, opts || &#123;&#125;);<br><br>        <span class="hljs-comment">// do something...</span><br>    &#125;<br><br>    <span class="hljs-comment">// do something...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>registerGetters</strong></p><p>把<code>module.[NAME].getters</code>合并到<code>getters</code>中, 并通过<code>Object.defineProperty</code>劫持<code>getters</code>中所有对象，转换成响应式类型。</p><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/utils/register.ts#L37-L55">github: mini-vuex3&#x2F;src&#x2F;utils&#x2F;register.ts#L37-L55</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注册 getters</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">registerGetters</span>(<span class="hljs-params">state: State, opts: StoreOpts</span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">getters</span>: <span class="hljs-built_in">any</span> = &#123;&#125;;<br><br>    <span class="hljs-title function_">reactiveGetters</span>(opts.<span class="hljs-property">getters</span>, state, getters);<br><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(opts.<span class="hljs-property">modules</span> || &#123;&#125;).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>.<span class="hljs-property">namespaced</span> === <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">const</span> newGetters = <span class="hljs-title function_">setModuleNameDataKey</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">getters</span>);<br>            <span class="hljs-title function_">reactiveGetters</span>(newGetters, state[<span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span>], getters);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">reactiveGetters</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">getters</span>, state[<span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span>], getters);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> getters;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 劫持 getters 对象，处理成响应式内容</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">getters</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">state</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">res</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactiveGetters</span>(<span class="hljs-params">getters: Getters, state: State, res: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> &#125;</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> getters) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(res, key, &#123;<br>            <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">return</span> getters[key](state);<br>            &#125;,<br><br>            <span class="hljs-title function_">set</span>(<span class="hljs-params">key</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Cannot set getters <span class="hljs-subst">$&#123;key&#125;</span>`</span>);<br>            &#125;,<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-实例方法"><a href="#3-实例方法" class="headerlink" title="3 实例方法"></a>3 实例方法</h3><h4 id="3-1-commit-方法"><a href="#3-1-commit-方法" class="headerlink" title="3.1 commit 方法"></a>3.1 commit 方法</h4><p>访问<code>namespaced</code>为<code>true</code>的<code>modules</code>对象时, 修改<code>state</code>对象范围。</p><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/core/store.ts#L61-L85">github: mini-vuex3&#x2F;src&#x2F;core&#x2F;store.ts#L61-L85</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">store</span> &#123;<br>    <span class="hljs-comment">// do something...</span><br><br>    <span class="hljs-title function_">commit</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>, payload: Payload</span>) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-attr">func</span>: <span class="hljs-title class_">Mutation</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_mutations</span>[<span class="hljs-keyword">type</span>];<br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">state</span>: <span class="hljs-title class_">State</span>;<br><br>        <span class="hljs-comment">// 未定义属性</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> func === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`unknown mutation type: <span class="hljs-subst">$&#123;<span class="hljs-keyword">type</span>&#125;</span>`</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isModuleType</span>(<span class="hljs-keyword">type</span>)) &#123;<br>            <span class="hljs-keyword">const</span> name = <span class="hljs-keyword">type</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_modules</span>[name];<br><br>            state = <span class="hljs-variable language_">module</span>.<span class="hljs-property">state</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            state = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>        &#125;<br><br>        func.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, state, payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-dispatch-方法"><a href="#3-2-dispatch-方法" class="headerlink" title="3.2 dispatch 方法"></a>3.2 dispatch 方法</h4><p>访问<code>namespaced</code>为<code>true</code>的<code>modules</code>对象时, 修改函数内<code>this</code>的<code>commit</code>和<code>dispatch</code>作用域范围和对应的<code>store</code>内容。</p><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/core/store.ts#L87-L116">github: mini-vuex3&#x2F;src&#x2F;core&#x2F;store.ts#L87-L116</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">store</span> &#123;<br>    <span class="hljs-comment">// do something...</span><br><br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>, payload: Payload</span>) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-attr">func</span>: <span class="hljs-title class_">Action</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_actions</span>[<span class="hljs-keyword">type</span>];<br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">store</span>: <span class="hljs-built_in">any</span>;<br><br>        <span class="hljs-comment">// 未定义属性</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> func === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`unknown action type: <span class="hljs-subst">$&#123;<span class="hljs-keyword">type</span>&#125;</span>`</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isModuleType</span>(<span class="hljs-keyword">type</span>)) &#123;<br>            <span class="hljs-keyword">const</span> name = <span class="hljs-keyword">type</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_modules</span>[name];<br><br>            store = <span class="hljs-variable language_">module</span>;<br>            <span class="hljs-comment">// 修改作用域范围</span><br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(store, &#123;<br>                <span class="hljs-attr">commit</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">commit</span>.<span class="hljs-title function_">bind</span>(store),<br>                <span class="hljs-attr">dispatch</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">dispatch</span>.<span class="hljs-title function_">bind</span>(store),<br>            &#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            store = <span class="hljs-variable language_">this</span>;<br>        &#125;<br><br>        func.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, store, payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-辅助函数"><a href="#4-辅助函数" class="headerlink" title="4 辅助函数"></a>4 辅助函数</h3><h4 id="4-1-mapState-方法"><a href="#4-1-mapState-方法" class="headerlink" title="4.1 mapState 方法"></a>4.1 mapState 方法</h4><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/core/helpers.ts#L52-L92">github: mini-vuex3&#x2F;src&#x2F;core&#x2F;helpers.ts#L52-L92</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 辅助工具 mapState</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mapState</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; moduleName, opts &#125; = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>], <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">const</span> resFunc = &#123;&#125;;<br><br>    <span class="hljs-comment">// 数组内容，例如： mapState([&#x27;x1&#x27;, &#x27;x2&#x27;]) 或 mapState(&#x27;xxxModule&#x27;, [&#x27;xxx1&#x27;, &#x27;xxx2&#x27;])</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(opts)) &#123;<br>        opts.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">stateKey</span>) =&gt;</span> &#123;<br>            resFunc[stateKey] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> handleModuleType.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;state&#x27;</span>)[stateKey];<br>            &#125;;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 处理对象结构</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [newStateKey, val] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property">entries</span>&lt;<span class="hljs-built_in">string</span> | <span class="hljs-title class_">Function</span>&gt;(opts)) &#123;<br>            <span class="hljs-comment">// mapState(&#123; xxFunc: (state) =&gt; state.xx1 &#125;) 或  mapState(&#123; xxFunc(state)&#123; return state.xx1 + this.xxx1 &#125; &#125;)</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>                resFunc[newStateKey] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-keyword">const</span> state = handleModuleType.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;state&#x27;</span>);<br><br>                    <span class="hljs-comment">// 修改this指向，处理 回调函数中使用当前vm实例中的 data 或 computed 变量</span><br>                    <span class="hljs-keyword">return</span> val.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, state);<br>                &#125;;<br>            &#125;<br><br>            <span class="hljs-comment">// mapState(&#123; xxxxxxx1: &#x27;x1&#x27; &#125;) 或 mapState(&#x27;xxxModule&#x27;, &#123; xxxxxxx1: &#x27;x1&#x27; &#125;)</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                resFunc[newStateKey] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-keyword">return</span> handleModuleType.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;state&#x27;</span>)[val];<br>                &#125;;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> resFunc;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化 参数（命名空间和数据）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">namespace</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">map</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-params">moduleName: <span class="hljs-built_in">string</span>, opts: <span class="hljs-built_in">any</span></span>) &#123;<br>    <span class="hljs-comment">// 未定义 moduleName</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> moduleName !== <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">moduleName</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-attr">opts</span>: moduleName,<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        moduleName,<br>        opts,<br>    &#125;;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理命名空间（module类型）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">moduleName</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleModuleType</span>(<span class="hljs-params">moduleName: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>, <span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>, key: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;state&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> moduleName === <span class="hljs-literal">null</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>[<span class="hljs-keyword">type</span>] : <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>[<span class="hljs-keyword">type</span>][moduleName];<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>[<span class="hljs-keyword">type</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> newKey = key;<br><br>    <span class="hljs-keyword">if</span> (moduleName !== <span class="hljs-literal">null</span>) &#123;<br>        newKey = moduleName + <span class="hljs-string">&#x27;/&#x27;</span> + key;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>[<span class="hljs-keyword">type</span>][newKey];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-mapGetters-方法"><a href="#4-2-mapGetters-方法" class="headerlink" title="4.2 mapGetters 方法"></a>4.2 mapGetters 方法</h4><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/core/helpers.ts#L94-L119">github: mini-vuex3&#x2F;src&#x2F;core&#x2F;helpers.ts#L94-L119</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 辅助工具 mapGetters</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mapGetters</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; moduleName, opts &#125; = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>], <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">const</span> resFunc = &#123;&#125;;<br><br>    <span class="hljs-comment">// 数组内容，例如： mapGetters([&#x27;x1&#x27;, &#x27;x2&#x27;]) 或 mapGetters(&#x27;xxxModule&#x27;, [&#x27;xxx1&#x27;, &#x27;xxx2&#x27;])</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(opts)) &#123;<br>        opts.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">getterKey</span>) =&gt;</span> &#123;<br>            resFunc[getterKey] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> handleModuleType.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;getters&#x27;</span>, getterKey);<br>            &#125;;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// mapGetters(&#123; xxxxxxx1: &#x27;x1&#x27; &#125;) 或 mapGetters(&#x27;xxxModule&#x27;, &#123; xxxxxxx1: &#x27;x1&#x27; &#125;)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [newGetterKey, oldGetterKey] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property">entries</span>&lt;<span class="hljs-built_in">string</span>&gt;(opts)) &#123;<br>            resFunc[newGetterKey] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> handleModuleType.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;getters&#x27;</span>, oldGetterKey);<br>            &#125;;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> resFunc;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-mapMutations-方法"><a href="#4-3-mapMutations-方法" class="headerlink" title="4.3 mapMutations 方法"></a>4.3 mapMutations 方法</h4><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/core/helpers.ts#L121-L152">github: mini-vuex3&#x2F;src&#x2F;core&#x2F;helpers.ts#L121-L152</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 辅助工具 mapMutations</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mapMutations</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; moduleName, opts &#125; = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>], <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">const</span> resFunc = &#123;&#125;;<br><br>    <span class="hljs-comment">// 数组内容，例如： mapMutations([&#x27;x1&#x27;, &#x27;x2&#x27;]) 或 mapMutations(&#x27;xxxModule&#x27;, [&#x27;xxx1&#x27;, &#x27;xxx2&#x27;])</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(opts)) &#123;<br>        opts.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">getterKey</span>) =&gt;</span> &#123;<br>            resFunc[getterKey] = <span class="hljs-keyword">function</span> (<span class="hljs-params">payload</span>) &#123;<br>                <span class="hljs-keyword">const</span> func = handleModuleType.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;_mutations&#x27;</span>, getterKey);<br>                <span class="hljs-keyword">const</span> state = handleModuleType.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;state&#x27;</span>);<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_">func</span>(state, payload);<br>            &#125;;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [newGetterKey, oldGetterKey] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property">entries</span>&lt;<span class="hljs-built_in">string</span>&gt;(opts)) &#123;<br>            <span class="hljs-comment">// mapMutations(&#123; xxxxxxx1: &#x27;x1&#x27; &#125;) 或 mapMutations(&#x27;xxxModule&#x27;, &#123; xxxxxxx1: &#x27;x1&#x27; &#125;)</span><br>            resFunc[newGetterKey] = <span class="hljs-keyword">function</span> (<span class="hljs-params">payload</span>) &#123;<br>                <span class="hljs-keyword">const</span> func = handleModuleType.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;_mutations&#x27;</span>, oldGetterKey);<br>                <span class="hljs-keyword">const</span> state = handleModuleType.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;state&#x27;</span>);<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_">func</span>(state, payload);<br>            &#125;;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> resFunc;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-mapActions-方法"><a href="#4-4-mapActions-方法" class="headerlink" title="4.4 mapActions 方法"></a>4.4 mapActions 方法</h4><p><a href="https://github.com/2460392754/mini-project/blob/master/mini-vuex3/src/core/helpers.ts#L154-L200">github: mini-vuex3&#x2F;src&#x2F;core&#x2F;helpers.ts#L154-L200</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 辅助工具 mapActions</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mapActions</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; moduleName, opts &#125; = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>], <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">const</span> resFunc = &#123;&#125;;<br><br>    <span class="hljs-comment">// 数组内容，例如： mapActions([&#x27;x1&#x27;, &#x27;x2&#x27;]) 或 mapActions(&#x27;xxxModule&#x27;, [&#x27;xxx1&#x27;, &#x27;xxx2&#x27;])</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(opts)) &#123;<br>        opts.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">getterKey</span>) =&gt;</span> &#123;<br>            resFunc[getterKey] = <span class="hljs-keyword">function</span> (<span class="hljs-params">payload</span>) &#123;<br>                <span class="hljs-keyword">const</span> func = handleModuleType.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;_actions&#x27;</span>, getterKey);<br>                <span class="hljs-keyword">let</span> store = handleModuleStore.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName);<br><br>                store = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<br>                    &#123; ...store &#125;,<br>                    &#123;<br>                        <span class="hljs-attr">commit</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">commit</span>.<span class="hljs-title function_">bind</span>(store),<br>                        <span class="hljs-attr">dispatch</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">dispatch</span>.<span class="hljs-title function_">bind</span>(store),<br>                    &#125;<br>                );<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_">func</span>(store, payload);<br>            &#125;;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [newGetterKey, oldGetterKey] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property">entries</span>&lt;<span class="hljs-built_in">string</span>&gt;(opts)) &#123;<br>            <span class="hljs-comment">// mapActions(&#123; xxxxxxx1: &#x27;x1&#x27; &#125;) 或 mapActions(&#x27;xxxModule&#x27;, &#123; xxxxxxx1: &#x27;x1&#x27; &#125;)</span><br>            resFunc[newGetterKey] = <span class="hljs-keyword">function</span> (<span class="hljs-params">payload</span>) &#123;<br>                <span class="hljs-keyword">let</span> store = handleModuleStore.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, moduleName, <span class="hljs-string">&#x27;_actions&#x27;</span>, oldGetterKey);<br><br>                store = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<br>                    &#123; ...store &#125;,<br>                    &#123;<br>                        <span class="hljs-attr">commit</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">commit</span>.<span class="hljs-title function_">bind</span>(store),<br>                        <span class="hljs-attr">dispatch</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">dispatch</span>.<span class="hljs-title function_">bind</span>(store),<br>                    &#125;<br>                );<br><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store);<br><br>                <span class="hljs-keyword">return</span> store[<span class="hljs-string">&#x27;_actions&#x27;</span>][oldGetterKey](store, payload);<br>            &#125;;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> resFunc;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>手写一个 mini-vuex3 相对来说还是比较容易的，还是需要多看、多学、多写。</p><p><a href="#%E5%9C%B0%E5%9D%80">#地址</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue全家桶</tag>
      
      <tag>vuex</tag>
      
      <tag>mini-project</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
